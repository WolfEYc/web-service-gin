{
    "swagger": "2.0",
    "info": {
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "paths": {
        "/quotes/{id}": {
            "get": {
                "description": "gets a quote from its id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Get Quote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Queried Quote",
                        "schema": {
                            "$ref": "#/definitions/models.Quote"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Quote not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user from user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "Create User Request Body",
                        "name": "createuserbody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.CreateUserBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created User's ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad User Entry",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Gain an auth jwt cookie for a user by providing username and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "Login User Request Body",
                        "name": "loginuserbody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.LoginUserBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Obtained Auth",
                        "schema": {
                            "type": ""
                        }
                    },
                    "400": {
                        "description": "Bad Request Formation",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Wrong Password",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "models.Quote": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "63f79148c3a63a346225fd99"
                },
                "deliveryaddress": {
                    "type": "string",
                    "example": "best st"
                },
                "deliverydate": {
                    "type": "string",
                    "example": "2023-02-24T00:00:00Z"
                },
                "gallonsrequested": {
                    "type": "integer",
                    "example": 99999
                },
                "suggestedpricepergallon": {
                    "type": "number",
                    "example": 1.74
                },
                "totalamountdue": {
                    "type": "number",
                    "example": 173998.26
                },
                "userid": {
                    "type": "string",
                    "example": "63f78fc8c3a63a346225fd96"
                }
            }
        },
        "users.CreateUserBody": {
            "type": "object",
            "properties": {
                "address1": {
                    "type": "string",
                    "example": "coolsvile avvae"
                },
                "address2": {
                    "type": "string",
                    "example": "billion ave"
                },
                "city": {
                    "type": "string",
                    "example": "Houstonian"
                },
                "fullname": {
                    "type": "string",
                    "example": "zenyatta man"
                },
                "password": {
                    "type": "string",
                    "example": "notpassword"
                },
                "state": {
                    "type": "string",
                    "example": "AZ"
                },
                "username": {
                    "type": "string",
                    "example": "zamzang"
                },
                "zipcode": {
                    "type": "integer",
                    "example": 827392
                }
            }
        },
        "users.LoginUserBody": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "notpassword"
                },
                "username": {
                    "type": "string",
                    "example": "zamzang"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Basic password login token auth, stored in a cookie for convenience",
            "type": "apiKey",
            "name": "Authorization",
            "in": "cookie"
        }
    }
}